{"version":3,"sources":["RestaurantForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RestaurantForm","props","style","gridArea","className","name","id","size","type","min","max","cols","rows","placeholder","value","Intro","href","src","alt","title","Donations","WelcomeContent","to","App","state","chosenOffering","layoutClass","this","setState","content","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TAGO,SAASA,EAAeC,GAC3B,OACE,0BAAMC,MAAO,CAAEC,SAAU,SACrB,+DACF,yBAAKC,UAAU,cACb,wEACA,2BAAOC,KAAK,WAAWC,GAAG,WAAWC,KAAM,MAG7C,yBAAKH,UAAU,cACX,wEACA,2BAAOI,KAAK,SAASH,KAAK,aAAaI,IAAI,KAAKC,IAAI,UAGxD,yBAAKN,UAAU,cACX,uFACA,8BAAUO,KAAM,GAAIC,KAAM,EAAGP,KAAK,qBAGtC,yBAAKD,UAAU,cACX,8FACA,2BAAOI,KAAK,UAFhB,0BAGI,2BAAOA,KAAK,UAHhB,wBAMA,kCACI,6CAGA,yBAAKJ,UAAU,cACX,6FACA,2BAAOS,YAAY,GAAGN,KAAM,MAGhC,yBAAKH,UAAU,cACX,+CACA,2BAAOS,YAAY,oBAAoBN,KAAM,MAGjD,yBAAKH,UAAU,cACX,iDACA,2BAAOS,YAAY,iBAAiBN,KAAM,OAIlD,2BAAOC,KAAK,SAASM,MAAM,sCC3CnC,SAASC,EAAMd,GACb,OACE,yBAAKG,UAAU,SACb,+CACA,iCACK,uBAAGY,KAAK,mDAAR,iCADL,uCAEuC,uFAFvC,+HAIgB,mEAJhB,6BAOA,4PAEgE,kFAFhE,KAKA,kPAKA,2BACE,uBAAGA,KAAK,mDACN,yBAAKC,IAAI,gBAAgBb,UAAU,UAAUc,IAAI,4BAA4BC,MAAM,8BADrF,2CASR,SAASC,IACP,OACE,kBAAC,WAAD,KACE,6DAEA,uBAAGhB,UAAU,yBAAb,oGAGE,4BACE,kDACA,8CAEA,yDACA,wCAEA,gDACA,0DAEA,+CACA,yDAQV,SAASiB,EAAepB,GACtB,OAAQ,kBAAC,WAAD,KACN,wBAAIK,GAAG,mBAAP,oCACM,yBAAKF,UAAU,OAAOE,GAAG,kBACvB,mDACA,wBAAIF,UAAU,kBACZ,wBAAIA,UAAU,cACZ,kBAAC,IAAD,CAAMkB,GAAG,eACP,wGACA,yBAAKlB,UAAU,YAGnB,wBAAIA,UAAU,gBACZ,kBAAC,IAAD,CAAMkB,GAAG,iBACP,sEACA,yBAAKlB,UAAU,YAGnB,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMkB,GAAG,aACP,oDACA,yBAAKlB,UAAU,cAMvB,yBAAKA,UAAU,OAAOE,GAAG,kBACvB,kBAACc,EAAD,QAUL,IAgDQG,EAhDf,4MAESC,MAAQ,CACbC,eAAgB,KAChBC,YAAa,IAJjB,kEAQIC,KAAKC,SAAS,CACZH,eACE,0BAAMvB,MAAO,CAAEC,SAAU,SACvB,yBAAKC,UAAU,cACb,wEACA,8BAAUC,KAAK,WAAWC,GAAG,eAInCoB,YAAa,oBAjBnB,+BAsBI,IAAIG,EAAiCF,KAAKH,MAAMC,eAehD,OAdgB,OAAZI,IACFA,EACE,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eACV,kBAAC9B,EAAD,OAEF,kBAAC,IAAD,CAAO8B,KAAK,KACV,kBAACT,EAAD,UAON,kBAAC,WAAD,KACE,yBAAKf,GAAG,YAAYF,UAAWuB,KAAKH,MAAME,aACxC,kBAACX,EAAD,MACCc,QAzCX,GAAyBE,aCzFLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f65b19b.chunk.js","sourcesContent":["import React, { Component, Fragment, ReactElement } from 'react';\nimport './Form.css';\n\nexport function RestaurantForm(props: object) {\n    return (\n      <form style={{ gridArea: \"form\" }}>\n          <h2>Készétel felajánlás</h2>\n        <div className=\"form-group\">\n          <label>Milyen ételt tudsz felajánlani?</label>\n          <input name=\"txt-dish\" id=\"txt-dish\" size={30} />\n        </div>\n\n        <div className=\"form-group\">\n            <label>Hány adagot tudsz készíteni?</label>\n            <input type=\"number\" name=\"dish-count\" min=\"10\" max=\"1000\"/>\n        </div>\n\n        <div className=\"form-group\">\n            <label>Milyen fontosabb hozzávalók kellenek hozzá?</label>\n            <textarea cols={30} rows={4} name=\"txt-ingredients\"></textarea>\n        </div>\n\n        <div className=\"form-group\">\n            <label>Meg tudod oldani a kiszállítást a kórházhoz?</label>\n            <input type=\"radio\" /> Igen, meg tudom oldani\n            <input type=\"radio\" /> Nem tudom megoldani\n        </div>\n\n        <fieldset>\n            <legend>\n                Kapcsolat\n            </legend>\n            <div className=\"form-group\">\n                <label>Cégnév, vagy kapcsolattartó neve (saját neved)</label>\n                <input placeholder=\"\" size={30}/>\n            </div>\n\n            <div className=\"form-group\">\n                <label>Email cím</label>\n                <input placeholder=\"neved@example.org\" size={30} />\n            </div>\n\n            <div className=\"form-group\">\n                <label>Telefonszám</label>\n                <input placeholder=\"06-30-123-4567\" size={30} />\n            </div>\n        </fieldset>\n\n        <input type=\"submit\" value=\"Felajánlás elküldése\" />\n      </form>\n    )\n  }\n\n  export default RestaurantForm;","import React, { Component, Fragment, ReactElement } from 'react';\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport { RestaurantForm } from \"./RestaurantForm\";\n\nfunction Intro(props: object) {\n  return (\n    <div className=\"intro\">\n      <h2>Kik vagyunk mi?</h2>\n      <p>\n        Az <a href=\"https://www.facebook.com/groups/195786688381007\">#EtesdADokit Facebook csoport</a>\n                &nbsp;azért jött létre, hogy <strong>segítse az egészségügyben dolgozókat</strong>.\n                Pár hét múlva több ezer beteget ápolni megterhelő lesz, az egészségügyben dolgozóknak\n                &nbsp;<strong>vitaminokban gazdag étrendre</strong> lesz szükségük.\n            </p>\n\n      <p>\n        Amire biztos szükség van: szakácsok, éttermek, konyhák, beszállítók, hűtők-hűtőkocsik, marketinges, logisztika,\n            csomagolóanyagok. Főleg kapcsolatok, hogy hogyan is lehet <strong>összeszervezni és eljuttatni az ételt</strong>.\n            </p>\n\n      <p>\n        Abszolút elsődleges szempont a biztonság, az éttermeknek a HACCP kívánalmaknak meg kell felelnie, a szakácsok\n        védőfelszerelésben (szájmaszk+kesztyűben) főznének.\n            </p>\n\n      <p>\n        <a href=\"https://www.facebook.com/groups/195786688381007\">\n          <img src=\"./fb-logo.png\" className=\"fb-logo\" alt=\"Keress minket Facebookon!\" title=\"Keress minket Facebookon!\" />\n                    &nbsp;Csatlakozz hozzánk Facebookon!\n                </a>\n      </p>\n    </div>\n  );\n}\n\nfunction Donations() {\n  return (\n    <Fragment>\n      <h3>Pénzbeli segítséggel</h3>\n\n      <p className=\"bank-transfer-details\">\n        Ha banki átutalással szeretnél támogatni minket, akkor az alábbi adatokad add meg:\n\n        <dl>\n          <dt>Kedvezményezett</dt>\n          <dd>Dr Fodor Judit</dd>\n\n          <dt>Számlavezető bank</dt>\n          <dd>CIB Bank</dd>\n\n          <dt>Számlaszám</dt>\n          <dd>10700141-53854944-51900001</dd>\n\n          <dt>Közlemény</dt>\n          <dd>#Etesdadokit! Debrecen</dd>\n        </dl>\n\n      </p>\n    </Fragment>\n  );\n}\n\nfunction WelcomeContent(props: object) {\n  return (<Fragment>\n    <h2 id=\"want-to-support\">Hogyan tudsz segíteni minket?</h2>\n          <div className=\"tile\" id=\"tile-offerings\">\n            <h3>Felajánlással</h3>\n            <ul className=\"offering-types\">\n              <li className=\"restaurant\">\n                <Link to=\"/restaurant\">\n                  <span>Éttermet, ételkiszállítót, pékséget képviselek</span>\n                  <div className=\"hover\"></div>\n                </Link>\n              </li>\n              <li className=\"raw-material\">\n                <Link to=\"/raw-material\">\n                  <span>Alapanyagom, csomagolóanyagom van</span>\n                  <div className=\"hover\"></div>\n                </Link>\n              </li>\n              <li className=\"shipping\">\n                <Link to=\"/shipping\">\n                  <span>Fuvarozó vagyok</span>\n                  <div className=\"hover\"></div>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"tile\" id=\"tile-donations\">\n            <Donations />\n          </div>\n  </Fragment>)\n}\n\ninterface AppState {\n  chosenOffering: ReactElement | null,\n  layoutClass: string\n}\n\nexport class App extends Component<any, AppState> {\n\n  public state = {\n    chosenOffering: null,\n    layoutClass: \"\"\n  };\n\n  onRestaurantClick() {\n    this.setState({\n      chosenOffering: (\n        <form style={{ gridArea: \"form\" }}>\n          <div className=\"form-group\">\n            <label>Milyen ételt tudsz felajánlani?</label>\n            <textarea name=\"txt-dish\" id=\"txt-dish\"></textarea>\n          </div>\n        </form>\n      ),\n      layoutClass: \"offering-form\"\n    })\n  }\n\n  render() {\n    let content: (ReactElement | null) = this.state.chosenOffering;\n    if (content === null) {\n      content = (\n        <BrowserRouter>\n        <Switch>\n          <Route path=\"/restaurant\">\n            <RestaurantForm />\n          </Route>\n          <Route path=\"/\">\n            <WelcomeContent />\n          </Route>\n        </Switch>\n          \n        </BrowserRouter>);\n    }\n    return (\n      <Fragment>\n        <div id=\"main-grid\" className={this.state.layoutClass}>\n          <Intro />\n          {content}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}